{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"## Description\r\nLARSAdController 3.0 is a singleton ad management class that manages ad classes that conform to the `LARSAdAdapter` protocol. Ads are managed in a way that most closely adheres to best practices for ad networks using a single instance for each ad network in order to provide the best publishing platform for advertisers to maximize ad inventory based on your particular needs.  Currently there are two adapters available (iAd and Google Ads). The adapters can be extended to any ad framework wanted.\r\n\r\n##Installing\r\n###Cocoapods\r\nThe absolute easiest way to integrate the code into your project is to use [cocoapods](http://cocoapods.org/?q=LARSAdController) to include the source in your project. If you need more detailed instructions or choose not to use Cocoapods, [check out the README](https://github.com/larsacus/LARSAdController).\r\n\r\nTo use cocoapods with `LARSAdController`, simply create your new `Podfile` and include the following dependency:\r\n\r\n``` ruby\r\nplatform :ios, '5.0'\r\n\r\npod 'LARSAdController', '~> 3.0'\r\n```\r\n\r\nThis will tell cocoapods to include all LARSAdController components of any version in v3.x. You will get the latest revision that cocoapods has in it's repository whose major revision is 3.x.\r\n\r\n###Subspecs\r\nIf you are only interested in iAds _or_ GoogleAds, but not both, you can specify that you would only like to have one or the other using the following in your `Podfile`:\r\n\r\n``` ruby\r\nplatform :ios, '5.0'\r\n\r\npod 'LARSAdController/iAds', '~> 3.0'\r\npod 'LARSAdController/GoogleAds', '~> 3.0'\r\n```\r\n\r\nIf you only need the core files without any ad adapters, then your `Podfile` will look something like this:\r\n\r\n``` ruby\r\nplatform :ios, '5.0'\r\n\r\npod 'LARSAdController/Core', '~> 3.0'\r\n```\r\n\r\n###Other Requirements\r\n1. iOS 5.0+\r\n2. Xcode 4.3+ - LLVM 4.0 support. Objective-C container literals are used.\r\n\r\n## Usage\r\n\r\nBack in the days of yore, `LARSAdController` 2.0 forced you opt-in to rotation-handling.  This is no longer necessary as the ad management class will auto-detect your current orientation given that the current view controller that the ad container lives in is correctly setup.\r\n\r\nThe first step is to register your ad classes that the ad manager will use. The ad networks take priority in the order they were added in, so the first network registered is the highest priority, the second is below that, and so on:\r\n\r\nIn app delegate or somewhere else convenient before first banner is needed to display:\r\n\r\n``` objective-c\r\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions{\r\n    [[LARSAdController sharedManager] registerAdClass:[TOLAdAdapteriAds class]];\r\n    [[LARSAdController sharedManager] registerAdClass:[TOLAdAdapterGoogleAds class] withPublisherId:publisherId];\r\n}\r\n```\r\n\r\nThen the only line of code you need in your view controller is to add the container to your view using either of the following in `viewWillAppear:`:\r\n\r\n`[[LARSAdController sharedManager] addAdContainerToView:self.view withViewController:self];`\r\n\r\nor the simpler version:  \r\n`[[LARSAdController sharedManager] addAdContainerToViewInViewController:self];`\r\n\r\nOnce the current highest-priority ad network fails to obtain an ad, it will continue to wait for an ad while the next-highest priority ad network is allocated and sends a request.  Once the ad network in priority above this network obtains an ad again, it will hide the lower-priority ad banner, clean it up and display the higher-priority network banner.\r\n\r\n###Ultra-Lazy Implementation\r\nTo make your life even _easier_, all you need to do is have each of your view controllers that you would like to have an ad pinned to the top or bottom of your view controller's view is to have your view controller subclasses inherit from `TOLAdViewController`. This will automagically add an ad view container to your view controller's view when it is supposed to. The only downside is less flexibility on ad placement in your view hierarchy.\r\n\r\n``` objective-c\r\n@interface MYBestViewController : TOLAdViewController\r\n//BOOM - Ads\r\n@end\r\n```\r\n\r\n####Conditionally Displaying Ads\r\nIf you'd only like the ads to be displayed under certain conditions (like when a user has purchased a certain in-app upgrade), then simply override `-shouldDisplayAds` in your `TOLAdViewController` subclass. Ads will not be loaded on `viewWillAppear:` if `shouldDisplayAds` returns `NO`:\r\n\r\n``` objective-c\r\n- (BOOL)shouldDisplayAds{\r\n  return ([self.purchaseTracker hasPurchasedUpgrade] == NO);\r\n}\r\n```\r\n\r\n##Ad Placement\r\nIn the past, you were only able to add a banner view to the bottom of a view and have it animate in from the bottom.  Now, you are able to not only control whether it resides at the top or bottom of your view, but control how it animates in and out of the screen.\r\n\r\nTwo new properties are available on `LARSAdController`:\r\n\r\n``` objective-c\r\n@property (nonatomic) LARSAdControllerPresentationType presentationType;\r\n@property (nonatomic) LARSAdControllerPinLocation pinningLocation;\r\n```\r\n\r\nThe options for `presentationType` are as follows. These options will slide the ad banner in and out from the direction indicated in the enum:\r\n\r\n``` objective-c\r\ntypedef NS_ENUM(NSInteger, LARSAdControllerPresentationType){\r\n    LARSAdControllerPresentationTypeBottom = 0,\r\n    LARSAdControllerPresentationTypeTop,\r\n    LARSAdControllerPresentationTypeLeft,\r\n    LARSAdControllerPresentationTypeRight\r\n};\r\n```\r\n\r\nThese options will pin the ad view container to the bottom (default) or top of the view you specify and layout the banner inside the container accordingly:\r\n\r\n``` objective-c\r\ntypedef NS_ENUM(NSInteger, LARSAdControllerPinLocation){\r\n    LARSAdControllerPinLocationBottom =  0,\r\n    LARSAdControllerPinLocationTop\r\n};\r\n```\r\n\r\n##Currently Available Ad Network Adapters\r\n1. iAd - `TOLAdAdapteriAds`\r\n2. Google Ads - `TOLAdAdapterGoogleAds`\r\n\r\n###Planned Ad Network Adapters (Not Yet Implemented)\r\n1. House Ads - Display your own image with an action for a banner\r\n2. Developer Ads - Display auto-generated banner ads for all of your apps with a single line of code\r\n\r\n##Creating a New Ad Network Adapter\r\nIn order to create a new ad adapter for an ad vendor not already created, simply create a new `NSObject` subclass that conforms to the `LARSAdAdapter` protocol. There are a few required methods and properties that must be present in order for the adapter to function, as well as some optional ones that give some additional control/functionality of an ad banner. More detailed documentation can be found in the header file for `LARSAdAdapter.h`.\r\n\r\nA good start would be to simply conform to the `LARSAdAdapter` protocol, compile, and let all of the warnings, errors, and runtime asserts help you complete the implementation:\r\n\r\n``` objective-c\r\n@interface LARSAdControllerHouseAdsAdapter : NSObject <LARSAdAdapter>\r\n  //fill out the meaty part  \r\n@end\r\n```\r\n\r\n##Apps Using LARSAdController\r\nIf your app is using LARSAdController, and you'd like to be included in this list, please let me know either on twitter or by submitting a pull request with your app added to the README.\r\n\r\n- Droid Light","name":"LARSAdController","google":"UA-38020983-1","tagline":"Lightweight Mobile Ad Mediation for iOS"}